apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;


    events {
      worker_connections  1024;
    }


    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      keepalive_timeout  65;

      #gzip  on;

      # Config for Web Socket proxying:
      map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
      }

      upstream websocket_8080 {
        server 127.0.0.1:8080;
      }

      server {
        listen       80         default_server;
        listen       [::]:80    default_server;

{{ if .Values.tls.base64EncodedPrivateKey }}
        listen       443        ssl http2 default_server;
        listen       [::]:443   ssl http2 default_server;
        #server_name  localhost;

        # Use generated certificates:
        ssl_certificate         /root/certs/tls.crt;
        ssl_certificate_key     /root/certs/tls.key;
        ssl_ciphers             "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_protocols           TLSv1 TLSv1.1 TLSv1.2;
{{ end }}
        #charset koi8-r;
        access_log  /var/log/nginx/host.access.log  main;

        location / {
          root   /usr/share/nginx/html;
          index  index.html index.htm;
          add_header Set-Cookie "nvidia_index_websocket_origin=$Host; Path=/; HttpOnly";
        }

        location ~ ^/(index_command_client|index_video_client) {
          proxy_pass http://websocket_8080;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

          proxy_cache_bypass $http_upgrade;
          proxy_buffering off;
          proxy_ignore_client_abort off;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
          root   /usr/share/nginx/html;
        }

{{ if .Values.viewerGeneratedPassword }}
        auth_basic "Authentication required.";
        auth_basic_user_file /htpasswd/htpasswd;
{{ end }}

      }
    }
